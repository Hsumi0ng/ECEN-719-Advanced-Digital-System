Homework – 1

a)	(5 points) For the process of customer1( ), please discuss what might be different on the simulation results between using and without using the “wait(SC_ZERO_TIME)”

ANS:
If wait(SC_ZERO_TIME) is not used, there will result only one customer being repeatedly serviced. 
When initialization, all process being activated without a specific order. Let’s say the customer 1 being served first, when tank_full being notified, without a wait(SC_ZERO_TIME), the tank1 will immediately be assigned to zero again, then be served again. No way customer 2 will be served without a wait(SC_ZERO_TIME).

If wait(SC_ZERO_TIME) is used, when one customer‘s tank is filled up, next, the other customer will then be serviced.

(5 points) For the process of attendant( ), please discuss what might be different on the simulation results between using “tank_full.notify( )” and “tank_full.notify(SC_ZERO_TIME)”.

ANS:  When it comes to tank being filled up, with or without SC_ZERO_TIME, no matter which customer will be triggered， they will encounter the wait (SC_ZERO_TIME) and wait until every runnable process before them come to an end, so I think there will not be a difference with or without a delta cycle delay.

b)	(5 points) Please write a piece SystemC code for the process of customer2( ). Please note that there is no static sensitivity for customer2( ).
ANS: 
void gas_station::customer2(){
   while(true){
       wait(SC_ZERO_TIME); tank2 = 0;
       do {
           request2.notify();
           wait(tank_full);
       } while (tank2 == 0);
   } 
}

c)	(5 points) Please rewrite the SystemC code for attendant( ) using thread process without static sensitivity.
ANS:
void gas_station::attendant(){
    while(true){
        wait(request1 | request2); // listen for request1 or request2
        tank_full.notify(FILL_TIME); // notify tank full when done
    }
}
