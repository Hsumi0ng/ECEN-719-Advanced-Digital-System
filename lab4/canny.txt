//===========================================
// Function : Canny Edge Detector
//===========================================
#include "Canny_Edge.h"
#include "math.h"

  // ----- Code Starts Here ----- 

void Canny_Edge::Write_Data() {
	if (!bCE.read() && !bWE.read()) {
		
		// Write data to regX, regY, regZ.
		if(dWriteReg.read() == WRITE_REGX)
			regX[AddrRegRow.read()][AddrRegCol.read()] = InData.read();
		// Insert Your Code here //
		if(dWriteReg.read() == WRITE_REGY)
			regY[AddrRegRow.read()][AddrRegCol.read()] = InData.read();
                if(dWriteReg.read() == WRITE_REGZ)
			regZ[AddrRegRow.read()][AddrRegCol.read()] = InData.read();
		
		// For debug	
		#if defined (_DEBUG_)
		cout << "@" << sc_time_stamp() << ":: Write: " << InData.read() << endl;
		#endif
	}
}

void Canny_Edge::Read_Data() {
	if (!bCE.read() && bWE.read()) {
		unsigned int dData;
		if(dReadReg.read() ==  REG_GAUSSIAN) 	{	dData = Out_gf;}
		// Insert Your Code here //
                // For REG_NMS, read data from regX[][]
		if(dReadReg.read() ==  REG_GRADIENT) 	{	dData = Out_gradient;}
		if(dReadReg.read() ==  REG_DIRECTION) 	{	dData = Out_direction;}
		if(dReadReg.read() ==  REG_HYSTERESIS) 	{	dData = Out_bThres;}
                if(dReadReg.read() ==  REG_NMS) 	{	dData = regX[AddrRegRow.read()][AddrRegCol.read()];}
                OutData.write(dData);
		
      	
		// For debug	
		#if defined (_DEBUG_)
		cout << "@" << sc_time_stamp() << ":: Read[" << AddrRegRow.read() << "]";
		cout << "[" << AddrRegCol.read() << "]: " << dData << endl;
		#endif
	}
}

void Canny_Edge::Initialize() {
	if(!rst_b.read()){
		// Initialize 5x5 matrix
		short tRow, tCol;
		for(tRow=0; tRow<5; tRow++){
			for(tCol=0; tCol<5; tCol++){
				regX[tRow][tCol] = 0;
			}
		}
		// Initialize Gaussian matrix
		gf[0][0]=2;	gf[0][1]=4;	gf[0][2]=5;	gf[0][3]=4;	gf[0][4]=2;
		gf[1][0]=4;	gf[1][1]=9;	gf[1][2]=12;	gf[1][3]=9;	gf[1][4]=4;
		gf[2][0]=5;	gf[2][1]=12;	gf[2][2]=15;	gf[2][3]=12;	gf[2][4]=5;
		gf[3][0]=4;	gf[3][1]=9;	gf[3][2]=12;	gf[3][3]=9;	gf[3][4]=4;
		gf[4][0]=2;	gf[4][1]=4;	gf[4][2]=5;	gf[4][3]=4;	gf[4][4]=2;

		// Sobel dx
		Sobeldx[0][0]=-1;	Sobeldx[0][1]=0;	Sobeldx[0][2]=1;	
		Sobeldx[1][0]=-2;	Sobeldx[1][1]=0;	Sobeldx[1][2]=2;
		Sobeldx[2][0]=-1;	Sobeldx[2][1]=0;	Sobeldx[2][2]=1;
		// Sobel dy
		Sobeldy[0][0]=1;	Sobeldy[0][1]=2;	Sobeldy[0][2]=1;	
		Sobeldy[1][0]=0;	Sobeldy[1][1]=0;	Sobeldy[1][2]=0;
		Sobeldy[2][0]=-1;	Sobeldy[2][1]=-2;	Sobeldy[2][2]=-1;
	}
}

void Canny_Edge::Apply_Operation(){
	if(!bOPEnable.read()){
		if (OPMode.read() == MODE_GAUSSIAN){
			int c,d;	
			float sum = 0;
			// CONVOLUTION
			for(c=-2; c<=2; c++){
				for(d=-2; d<=2; d++){
					sum = sum + (float) regX[c+2][d+2] * gf[c+2][d+2];
				}
                        }
			Out_gf = char(sum/159);
	    	}
		else if(OPMode.read() == MODE_SOBEL){
			int c,d;
			short Gx=0;		// X direction Component
			short Gy=0;		// Y direction Component
                        
			// 1. input : Sobeldx, Sobeldy, regX(Gaussian Filtered Image)
			// 2. Output : Out_gradient(0~255), Out_direction(0, 45, 90, 135)
			// Insert Your Code here //
			for (c = -1; c <= 1; c++) {
				for (d = -1; d <= 1; d++) {
					Gx = Gx + (float) regX[c+1][d+1] * Sobeldx[c+1][d+1];
					Gy = Gy + (float) regX[c+1][d+1] * Sobeldy[c+1][d+1];
				}
			}
                
			// For gradient:
			// If |Gx| + |G y| > 512: Out_gradient = 255;
			// Otherwise, Out_gradient = (|Gx| + |Gy|) / 2;
                        int sum = 0;
                        sum = abs(Gx)+abs(Gy);
                        if ( sum > 512) {Out_gradient = 255;}
                        else {Out_gradient = (int)(sum / 2);}

                        if(Gy<0){
                          Gx = -1*Gx;
                          Gy = -1*Gy;
                        }
                        if(Gx >= 0){
                          if(Gy <= 0.4*Gx) {Out_direction = 0;}
                          else if ( Gy >2.4*Gx) {Out_direction = 90;}
                          else {Out_direction = 45;}
                        }
                        else{
                          if(Gy <=- 0.4*Gx){ Out_direction = 0;}
                          else if ( Gy > -2.4*Gx){ Out_direction = 90;}
                          else {Out_direction = 135; }
                        }
                
                }
                         
                // Note: please don't modify the value of regX in this step.

		else if(OPMode.read() == MODE_NMS){
			// 1. input : regX(Gradient Image), regY(Direction Image)
			// 2. Output : regX(Gradient Image)
			// Here we only look at the 3x3 matrix in regX[0-2][0-2].
			// Do NMS on regX[1][1] (point C in the manual) based on its two neighbors (point A, B in the manual);
			// Suppress C or A and B.
			// The suppressed value is moidfied in-place.
			// 
			// Insert Your Code here //
  
                  if( regY[1][1] == 0)   { 
                    if((regX[1][1]>=regX[1][0]) && (regX[1][1]>=regX[1][2])){
                      regX[1][0] = 0; regX[1][2] =0;
                    }
                    else{
                      regX[1][1] = 0;
                    }
                  }

                  if( regY[1][1] == 45)  {
                    if((regX[1][1]>=regX[0][2]) && (regX[1][1]>=regX[2][0])){
                      regX[0][2] = 0;
                      regX[2][0] = 0;
                    }
                    else{regX[1][1] =0;}
                  }

                  if( regY[1][1] == 90)  {
                    if((regX[1][1]>=regX[0][1]) && (regX[1][1]>=regX[2][1])){
                      regX[0][1] = 0; 
                      regX[2][1] =0;
                    }
                    else{regX[1][1] = 0;}
                  }

                  if( regY[1][1] == 135) { 
                    if((regX[1][1]>=regX[0][0]) && (regX[1][1]>=regX[2][2])){
                      regX[0][0] = 0; 
                      regX[2][2] =0;
                    }
                    else{regX[1][1] = 0;}
                  }
                 
                  
                
		}
		else if(OPMode.read() == MODE_HYSTERESIS){
			// You should use these two threshold values.
			unsigned short dThresHigh = 35;
			unsigned short dThresLow = 5;

			// 1. input : regX(Gradient Image), regY(Direction Image)
			// 2. Output : Out_bThres (0(Off) or 1(On))
			// 3. auxiliary : regZ (0 or 1 indicating if a pixel has been labeled as strong or weak)
			// Same as NMS, we only look at the 3x3 matrix in regX[0-2][0-2]
			// if (regX[1][1] >= threshHi) : out_bThres = 1;
			// else if (regX[1][1] <= threshLo) : out_bThres = 0;
			// else : check two neighbors;
			// Insert Your Code here //
                        if(regX[1][1] >= dThresHigh){ Out_bThres = 1;}
                        else if(regX[1][1] <= dThresLow) {Out_bThres = 0;}
                        else {
                          if(regY[1][1] == 0) { if ((regZ[1][0] == 1) || (regZ[1][2] == 1)){Out_bThres =1;} else {Out_bThres = 0;}}
                          if(regY[1][1] == 45){ if ((regZ[0][2] == 1) || (regZ[2][0] == 1)){Out_bThres =1;} else {Out_bThres = 0;}}
                          if(regY[1][1] == 90){ if ((regZ[0][1] == 1) || (regZ[2][1] == 1)){Out_bThres =1;} else {Out_bThres = 0;}}
                          if(regY[1][1] ==135){ if ((regZ[0][0] == 1) || (regZ[2][2] == 1)){Out_bThres =1;} else {Out_bThres = 0;}}
                        }
                
		}
        }

}
